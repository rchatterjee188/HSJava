#BlueJ class context
comment0.params=
comment0.target=StdIn()
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\r\n\ Is\ the\ input\ empty\ (except\ possibly\ for\ whitespace)?\ Use\ this\r\n\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readString()},\ \r\n\ {@link\ \#readDouble()},\ etc\ will\ succeed.\r\n
comment10.params=
comment10.target=float\ readFloat()
comment10.text=\r\n\ Read\ and\ return\ the\ next\ float.\r\n
comment11.params=
comment11.target=long\ readLong()
comment11.text=\r\n\ Read\ and\ return\ the\ next\ long.\r\n
comment12.params=
comment12.target=short\ readShort()
comment12.text=\r\n\ Read\ and\ return\ the\ next\ short.\r\n
comment13.params=
comment13.target=byte\ readByte()
comment13.text=\r\n\ Read\ and\ return\ the\ next\ byte.\r\n
comment14.params=
comment14.target=boolean\ readBoolean()
comment14.text=\r\n\ Read\ and\ return\ the\ next\ boolean,\ allowing\ case-insensitive\r\n\ "true"\ or\ "1"\ for\ true,\ and\ "false"\ or\ "0"\ for\ false.\r\n
comment15.params=
comment15.target=java.lang.String[]\ readAllStrings()
comment15.text=\r\n\ Read\ all\ strings\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\r\n
comment16.params=
comment16.target=int[]\ readAllInts()
comment16.text=\r\n\ Read\ all\ ints\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\r\n
comment17.params=
comment17.target=double[]\ readAllDoubles()
comment17.text=\r\n\ Read\ all\ doubles\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\r\n
comment18.params=
comment18.target=void\ resync()
comment18.text=\r\n\ If\ StdIn\ changes,\ use\ this\ to\ reinitialize\ the\ scanner.\r\n
comment19.params=scanner
comment19.target=void\ setScanner(java.util.Scanner)
comment2.params=
comment2.target=boolean\ hasNextLine()
comment2.text=\r\n\ Does\ the\ input\ have\ a\ next\ line?\ Use\ this\ to\ know\ whether\ the\r\n\ next\ call\ to\ {@link\ \#readLine()}\ will\ succeed.\ <p>\ Functionally\r\n\ equivalent\ to\ {@link\ \#hasNextChar()}.\r\n
comment20.params=
comment20.target=int[]\ readInts()
comment20.text=\r\n\ Reads\ all\ ints\ from\ stdin.\r\n\ @deprecated\ For\ more\ consistency,\ use\ {@link\ \#readAllInts()}\r\n
comment21.params=
comment21.target=double[]\ readDoubles()
comment21.text=\r\n\ Reads\ all\ doubles\ from\ stdin.\r\n\ @deprecated\ For\ more\ consistency,\ use\ {@link\ \#readAllDoubles()}\r\n
comment22.params=
comment22.target=java.lang.String[]\ readStrings()
comment22.text=\r\n\ Reads\ all\ Strings\ from\ stdin.\r\n\ @deprecated\ For\ more\ consistency,\ use\ {@link\ \#readAllStrings()}\r\n
comment23.params=args
comment23.target=void\ main(java.lang.String[])
comment23.text=\r\n\ Interactive\ test\ of\ basic\ functionality.\r\n
comment3.params=
comment3.target=boolean\ hasNextChar()
comment3.text=\r\n\ Is\ the\ input\ empty\ (including\ whitespace)?\ Use\ this\ to\ know\ \r\n\ whether\ the\ next\ call\ to\ {@link\ \#readChar()}\ will\ succeed.\ <p>\ Functionally\r\n\ equivalent\ to\ {@link\ \#hasNextLine()}.\r\n
comment4.params=
comment4.target=java.lang.String\ readLine()
comment4.text=\r\n\ Read\ and\ return\ the\ next\ line.\r\n
comment5.params=
comment5.target=char\ readChar()
comment5.text=\r\n\ Read\ and\ return\ the\ next\ character.\r\n
comment6.params=
comment6.target=java.lang.String\ readAll()
comment6.text=\r\n\ Read\ and\ return\ the\ remainder\ of\ the\ input\ as\ a\ string.\r\n
comment7.params=
comment7.target=java.lang.String\ readString()
comment7.text=\r\n\ Read\ and\ return\ the\ next\ string.\r\n
comment8.params=
comment8.target=int\ readInt()
comment8.text=\r\n\ Read\ and\ return\ the\ next\ int.\r\n
comment9.params=
comment9.target=double\ readDouble()
comment9.text=\r\n\ Read\ and\ return\ the\ next\ double.\r\n
numComments=24
